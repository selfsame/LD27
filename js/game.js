// Generated by CoffeeScript 1.3.1
(function() {
  var connect_to_socket,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Array.prototype.remove = function(item) {
    var indx;
    indx = this.indexOf(item);
    if (indx !== -1) {
      return this.splice(indx, 1);
    }
  };

  window.v_w = 800;

  window.v_h = 600;

  $('#viewport').css({
    width: window.v_w,
    height: window.v_h
  });

  connect_to_socket = function(_name, _color) {
    var ws;
    ws = new WebSocket('ws://' + window.location.hostname + ':8079');
    console.dir(ws);
    ws.onopen = function() {
      return ws.send(JSON.stringify({
        'login': {
          name: _name,
          color: _color
        }
      }));
    };
    ws.onmessage = function(message) {
      var avatar, bubble, c, data, deg, diff, n, o, player, relative, set, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      data = JSON.parse(message.data);
      if (data.self != null) {
        window.me = data.self;
      }
      if (data.disconnect != null) {
        if ($('#' + data.disconnect)[0] != null) {
          return $('#' + data.disconnect).detach();
        }
      } else if (data.chat != null) {
        if ($('#' + data.who)[0] != null) {
          bubble = $('<p class="bubble" >' + data.chat + '</p>');
          $('#' + data.who).children('.chat').html(bubble);
          bubble.css('margin-top', -1 * bubble.height() - 25);
          return bubble.delay(2000).animate({
            opacity: 0.0
          }, 300, function() {
            return bubble.detach();
          });
        }
      } else if (data.load != null) {
        console.log('load');
        n = data.load;
        return $.get('./levels/level' + n + '.html', function(data) {
          $('#game').html(data);
          return $('#game').find('.dynamic').detach();
        });
      } else if ((data.debrief != null) || (data.connect != null)) {
        if (!($('body').children('#debug')[0] != null)) {
          $('body').append('<div id="debug"></div>');
        }
        set = data.debrief || data.connect;
        for (_i = 0, _len = set.length; _i < _len; _i++) {
          player = set[_i];
          if (!($('#' + player.ID)[0] != null)) {
            console.log('new ', player);
            if ((player.t != null) && player.t === true) {
              avatar = $('<div class="player dynamic", id="' + player.ID + '">\
							</div>');
            } else {
              avatar = $('<div class="player", id="' + player.ID + '">\
							<div class="chat"></div><div class="playername"></div></div>');
            }
            if (player.ID === window.me) {
              avatar.addClass('self');
            }
            if (player.cs) {
              _ref = player.cs;
              for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                c = _ref[_j];
                avatar.addClass(c);
              }
            }
            avatar.css({
              width: player.w,
              height: player.h,
              position: 'absolute',
              left: player.x + 10,
              top: player.y + 10
            });
            if (player.color) {
              avatar.css({
                'background-color': player.color
              });
            }
            if (player.name) {
              avatar.children('.playername').html(player.name);
            }
            $('#game').append(avatar);
          } else {
            avatar = $('#' + player.ID);
            if (player.ID === window.me) {
              avatar.addClass('self');
            }
            if (player.cs) {
              _ref1 = player.cs;
              for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                c = _ref1[_k];
                avatar.addClass(c);
              }
            }
            if (player.color) {
              avatar.css({
                'background-color': player.color
              });
            }
            if (player.name) {
              avatar.children('.playername').html(player.name);
            }
            if (player.x) {
              avatar.css({
                left: player.x
              });
            }
            if (player.y) {
              avatar.css({
                top: player.y
              });
            }
            if (player.d != null) {
              deg = player.d * -1;
              avatar.css('transform', 'rotate(' + deg + 'deg)');
            }
          }
        }
        o = {
          top: parseInt($('.player.self').css('top')),
          left: parseInt($('.player.self').css('left'))
        };
        relative = o.top + parseInt($('#game').css('top'));
        if (relative > window.v_h * .6) {
          diff = window.v_h * .6 - relative;
          $('#game').css('top', parseInt($('#game').css('top')) + diff + 'px');
        } else if (relative < window.v_h * .4) {
          diff = window.v_h * .4 - relative;
          $('#game').css('top', parseInt($('#game').css('top')) + diff + 'px');
        }
        relative = o.left + parseInt($('#game').css('left'));
        if (relative > window.v_w * .6) {
          diff = window.v_w * .6 - relative;
          return $('#game').css('left', parseInt($('#game').css('left')) + diff + 'px');
        } else if (relative < window.v_w * .4) {
          diff = window.v_w * .4 - relative;
          return $('#game').css('left', parseInt($('#game').css('left')) + diff + 'px');
        }
      }
    };
    window.keys = [];
    $(window).keydown(function(e) {
      var _ref;
      if ($('#chat').is(':focus')) {
        if (e.keyCode === 13) {
          ws.send(JSON.stringify({
            'chat': $('#chat').val()
          }));
          return $('#chat').val('');
        }
      } else if (_ref = e.keyCode, __indexOf.call(window.keys, _ref) < 0) {
        window.keys.push(e.keyCode);
        return ws.send(JSON.stringify({
          'keydown': e.keyCode
        }));
      }
    });
    $(window).keyup(function(e) {
      window.keys.remove(e.keyCode);
      return ws.send(JSON.stringify({
        'keyup': e.keyCode
      }));
    });
    return window.compile_level = function(url) {
      return $.get('./levels/' + url, function(data) {
        var child, recurse, result, temp, _i, _len, _ref;
        result = [];
        temp = $('<div></div>');
        temp.append($(data));
        recurse = function(el) {
          var b, c, child, cs, _i, _j, _len, _len1, _ref, _ref1, _results;
          if (!$(el).hasClass('no_collision')) {
            b = {
              x: parseInt($(el).css('left')),
              y: parseInt($(el).css('top')),
              w: parseInt($(el).outerWidth()),
              h: parseInt($(el).outerHeight())
            };
            if ($(el).hasClass('dynamic')) {
              b.dynamic = true;
            }
            if ($(el).hasClass('dynamic' || $(el).hasClass('collect'))) {
              cs = [];
              _ref = $(el).attr('class').split(' ');
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                c = _ref[_i];
                if (c && c !== 'dynamic') {
                  cs.push(c);
                }
              }
              if (cs.length > 0) {
                b.cs = cs;
              }
            }
            if ($(el).hasClass('collect')) {
              b.type = 'collect';
            }
            if ($(el).hasClass('spawn')) {
              b.type = 'spawn';
            }
            result.push(b);
            _ref1 = $(el).children();
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              child = _ref1[_j];
              _results.push(recurse(child));
            }
            return _results;
          }
        };
        _ref = $(temp).children();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          recurse(child);
        }
        return console.log(JSON.stringify(result));
      });
    };
  };

  $('#connect').click(function(e) {
    var color, name;
    name = $('#username').val();
    color = $('.color_choice.active').first().css('background-color');
    connect_to_socket(name, color);
    $('.connectbox').css('display', 'none');
    return $('#connected').css('display', 'block');
  });

  $('.color_choice').click(function(e) {
    $('.color_choice').removeClass('active');
    return $(this).addClass('active');
  });

}).call(this);

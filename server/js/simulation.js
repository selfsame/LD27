// Generated by CoffeeScript 1.3.1
(function() {
  var B, Game, Player, levels, root,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  levels = ['[{"x":552,"y":358,"w":160,"h":86},{"x":-2,"y":-5,"w":16,"h":790},{"x":100,"y":667,"w":450,"h":40},{"x":786,"y":-22,"w":16,"h":818},{"x":5,"y":-1,"w":795,"h":33},{"x":4,"y":767,"w":795,"h":33},{"x":338,"y":290,"w":177,"h":41}]'];

  B = require('./libs/Box2dWeb-2.1.a.3.js');

  Array.prototype.remove = function(item) {
    var indx;
    indx = this.indexOf(item);
    if (indx !== -1) {
      return this.splice(indx, 1);
    }
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.randint = function(max) {
    return parseInt(Math.random() * max);
  };

  root.IDcounter = 0;

  root.getID = function() {
    root.IDcounter += 1;
    return root.IDcounter;
  };

  root.requestAnimFrame = (function() {
    return function(callback) {
      return setTimeout(callback, 1000 / 60);
    };
  })();

  Player = (function() {

    Player.name = 'Player';

    function Player(connection) {
      this.connection = connection;
      this.ID = root.getID();
      this.x = (root.randint(700)) + 50;
      this.y = 600;
      this.w = 10;
      this.h = 30;
      this.name = 'anon';
      this.keys = [];
      this.contacts = [];
      this.on_ground = false;
      this.head_clear = true;
      this.max_force = 4;
      this.max_velocity = 4.0;
      this.speed = .7;
    }

    Player.prototype.status = function() {
      return {
        x: this.x,
        y: this.y
      };
    };

    Player.prototype.state = function() {
      var pos;
      pos = this.body.GetPosition();
      this.x = pos.x * root.game.scale - this.w / 2;
      this.y = -pos.y * root.game.scale - this.h / 2;
      return {
        ID: this.ID,
        x: this.x,
        y: this.y,
        w: this.w,
        h: this.h
      };
    };

    Player.prototype.send = function(obj) {
      return this.connection.send(JSON.stringify(obj));
    };

    Player.prototype.keydown = function(code) {
      this.keys.push(code);
      if (code === 32) {
        if (this.on_ground) {
          return this.apply_velocity(0, 4.2);
        }
      }
    };

    Player.prototype.keyup = function(code) {
      if (__indexOf.call(this.keys, code) >= 0) {
        return this.keys.remove(code);
      }
    };

    Player.prototype.apply_velocity = function(x, y) {
      var max, v, vel;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      vel = this.body.GetLinearVelocity();
      max = this.max_velocity;
      x = x + vel.x;
      y = y + vel.y;
      if (Math.abs(x) > max) {
        x *= max / Math.abs(x);
      }
      if (Math.abs(y) > max) {
        y *= max / Math.abs(y);
      }
      try {
        v = new B.b2Vec2(x, y);
        return this.body.SetLinearVelocity(v);
      } catch (error) {
        return console.log('ERROR: ', B);
      }
    };

    Player.prototype.apply_force = function(x, y) {
      var p, v, vel;
      vel = this.body.GetLinearVelocity();
      x = x * this.max_force;
      y = y * this.max_force;
      v = new B.Common.Math.b2Vec2(x, y);
      p = this.body.GetWorldCenter();
      return this.body.ApplyForce(v, p);
    };

    Player.prototype.update = function() {
      this.body.m_sweep.a = 0;
      if (__indexOf.call(this.keys, 37) >= 0) {
        if (this.on_ground) {
          this.apply_velocity(-this.speed, 0.0);
        } else {
          this.apply_velocity(-.3, 0.0);
        }
      }
      if (__indexOf.call(this.keys, 39) >= 0) {
        if (this.on_ground) {
          return this.apply_velocity(this.speed, 0.0);
        } else {
          return this.apply_velocity(.3, 0.0);
        }
      }
    };

    Player.prototype.contact_add = function(entity, point) {};

    Player.prototype.contact_begin = function(entity, point) {};

    Player.prototype.contact_persist = function(entity, point) {
      if (point.normal != null) {
        if (point.normal.y > .5) {
          return this.on_ground = true;
        }
      }
    };

    Player.prototype.contact_remove = function(entity, point) {
      return this.on_ground = false;
    };

    return Player;

  })();

  Game = (function() {

    Game.name = 'Game';

    function Game() {
      var gravity, worldAABB;
      this.scale = 100.0;
      this.level = 0;
      this.players = [];
      worldAABB = new B.b2AABB();
      worldAABB.lowerBound.Set(-10.0, -10.0);
      worldAABB.upperBound.Set(10.0, 10.0);
      gravity = new B.b2Vec2(0.0, -5.0);
      this.world = new B.b2World(worldAABB, gravity, true);
      this.boxes = [];
      this.load_level(0);
      console.log(new B.b2ContactListener());
      this.ContactListener = new B.b2ContactListener();
      this.ContactListener.Add = this.contact_begin;
      this.ContactListener.Persist = this.contact_persist;
      this.ContactListener.Remove = this.contact_remove;
      this.world.SetContactListener(this.ContactListener);
    }

    Game.prototype.contact_add = function(point) {
      var ab;
      ab = root.game.get_contact_entities(point);
      if (ab[0]) {
        ab[0].contact_add(ab[1], point);
      }
      if (ab[1]) {
        return ab[1].contact_add(ab[0], point);
      }
    };

    Game.prototype.contact_begin = function(point) {
      var ab;
      ab = root.game.get_contact_entities(point);
      if (ab[0]) {
        ab[0].contact_begin(ab[1], point);
      }
      if (ab[1]) {
        return ab[1].contact_begin(ab[0], point);
      }
    };

    Game.prototype.contact_persist = function(point) {
      var ab;
      ab = root.game.get_contact_entities(point);
      if (ab[0]) {
        ab[0].contact_persist(ab[1], point);
      }
      if (ab[1]) {
        return ab[1].contact_persist(ab[0], point);
      }
    };

    Game.prototype.contact_remove = function(point) {
      var ab;
      ab = root.game.get_contact_entities(point);
      if (ab[0]) {
        ab[0].contact_remove(ab[1], point);
      }
      if (ab[1]) {
        return ab[1].contact_remove(ab[0], point);
      }
    };

    Game.prototype.get_contact_entities = function(point) {
      var first, next, result;
      first = point.shape1.m_body;
      next = point.shape2.m_body;
      result = [false, false];
      if (first.GetUserData()) {
        result[0] = first.GetUserData();
      }
      if (next.GetUserData()) {
        result[1] = next.GetUserData();
      }
      return result;
    };

    Game.prototype.load_level = function(n) {
      var data, obj, _i, _len, _results;
      this.debug = [];
      if (n < levels.length) {
        data = JSON.parse(levels[n]);
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          obj = data[_i];
          _results.push(this.boxes.push(this.make_static_box(obj)));
        }
        return _results;
      }
    };

    Game.prototype.make_static_box = function(obj) {
      var groundBody, groundBodyDef, groundShapeDef;
      groundBodyDef = new B.b2BodyDef();
      groundBodyDef.position.Set((obj.x + obj.w / 2) / this.scale, (-1 * (obj.y + obj.h / 2)) / this.scale);
      groundBody = this.world.CreateBody(groundBodyDef);
      groundShapeDef = new B.b2PolygonDef();
      groundShapeDef.friction = 0.3;
      groundShapeDef.restitution = .2;
      groundShapeDef.SetAsBox((obj.w / 2) / this.scale, (obj.h / 2) / this.scale);
      groundBody.CreateShape(groundShapeDef);
      return groundBody;
    };

    Game.prototype.update = function() {
      root.game.world.Step(1.0 / 60.0, 5);
      root.game.update_players();
      return root.requestAnimFrame(root.game.update);
    };

    Game.prototype.update_players = function() {
      var p, set, _i, _j, _len, _len1, _ref, _ref1, _results;
      set = [];
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        set.push(p.state());
      }
      this.broadcast({
        debrief: set
      });
      _ref1 = this.players;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        _results.push(p.update());
      }
      return _results;
    };

    Game.prototype.new_connection = function(ws) {
      var body, bodyDef, new_player, shapeDef;
      new_player = new Player(ws);
      ws.player = new_player;
      this.players.push(new_player);
      bodyDef = new B.b2BodyDef();
      bodyDef.allowSleep = false;
      bodyDef.type = B.b2Body.b2_dynamicBody;
      bodyDef.position.Set((new_player.x + new_player.w / 2) / this.scale, -1 * (new_player.y + new_player.h / 2) / this.scale);
      body = this.world.CreateBody(bodyDef);
      shapeDef = new B.b2PolygonDef();
      shapeDef.SetAsBox(new_player.w / 2 / this.scale, new_player.h / 2 / this.scale);
      shapeDef.density = 1.0;
      shapeDef.friction = 0.3;
      shapeDef.restitution = .2;
      body.CreateShape(shapeDef);
      body.SetMassFromShapes();
      new_player.body = body;
      body.SetUserData(new_player);
      this.broadcast({
        connect: new_player.state()
      });
      return new_player.send({
        load: this.level
      });
    };

    Game.prototype.broadcast = function(message) {
      var p, _i, _len, _ref, _results;
      _ref = this.players;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.send(message));
      }
      return _results;
    };

    return Game;

  })();

  root.Player = Player;

  root.game = new Game();

  root.game.update();

}).call(this);

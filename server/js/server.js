// Generated by CoffeeScript 1.3.1
(function() {
  var Game, IDcounter, Player, WebSocketServer, file, game, getID, http, port, randint, static_, util, webroot, wss;

  Array.prototype.remove = function(item) {
    var indx;
    indx = this.indexOf(item);
    if (indx !== -1) {
      return this.splice(indx, 1);
    }
  };

  randint = function(max) {
    return parseInt(Math.random() * max);
  };

  IDcounter = 0;

  getID = function() {
    IDcounter += 1;
    return IDcounter;
  };

  Player = (function() {

    Player.name = 'Player';

    function Player() {
      this.ID = getID();
      this.x = randint(500);
      this.y = randint(500);
      this.name = 'anon';
    }

    Player.prototype.status = function() {
      return {
        x: this.x,
        y: this.y
      };
    };

    Player.prototype.state = function() {
      return {
        ID: this.ID,
        x: this.x,
        y: this.y
      };
    };

    return Player;

  })();

  Game = (function() {

    Game.name = 'Game';

    function Game() {
      this.players = [];
    }

    Game.prototype.broadcast = function(message) {
      var p, _i, _len, _ref, _results;
      _ref = this.players;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.connection.send(message));
      }
      return _results;
    };

    return Game;

  })();

  game = new Game();

  WebSocketServer = require("ws").Server;

  wss = new WebSocketServer({
    port: 8080
  });

  wss.on("connection", function(ws) {
    ws.player = new Player();
    ws.player.connection = ws;
    game.players.push(ws.player);
    game.broadcast(JSON.stringify({
      connect: ws.player.state()
    }));
    ws.on("message", function(message) {
      message = JSON.parse(message);
      if (typeof message === 'object') {
        if (message.name != null) {
          ws.player.name = message.name;
        }
        if (message.chat != null) {
          console.log('chat', message.chat);
          game.broadcast(JSON.stringify({
            'chat': message.chat,
            'who': ws.player.ID
          }));
          ws.player.name = message.name;
        }
      }
      return console.log("received: %s", message);
    });
    ws.on("close", function(message) {
      var p, _i, _len, _ref, _results;
      game.players.remove(ws.player);
      _ref = game.players;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.connection.send(JSON.stringify({
          disconnect: ws.player.ID
        })));
      }
      return _results;
    });
    return ws.send(JSON.stringify({
      debrief: game.players.map(function(p) {
        return p.state();
      })
    }));
  });

  static_ = require("node-static");

  http = require("http");

  util = require("util");

  webroot = "../../";

  port = 8075;

  file = new static_.Server(webroot, {
    cache: 600,
    headers: {
      "X-Powered-By": "node-static"
    }
  });

  http.createServer(function(req, res) {
    return req.addListener("end", function() {
      return file.serve(req, res, function(err, result) {
        if (err) {
          console.error("Error serving %s - %s", req.url, err.message);
          if (err.status === 404 || err.status === 500) {
            return file.serveFile(util.format("/%d.html", err.status), err.status, {}, req, res);
          } else {
            res.writeHead(err.status, err.headers);
            return res.end();
          }
        } else {
          return console.log("%s - %s", req.url, res.message);
        }
      });
    });
  }).listen(port);

  console.log("node-static running at http://localhost:%d", port);

}).call(this);

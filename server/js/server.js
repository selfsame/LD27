// Generated by CoffeeScript 1.3.1
(function() {
  var Box2D, IDcounter, Player, Sim, WebSocketServer, file, game, getID, http, port, randint, static_, util, webroot, wss;

  Box2D = require('./libs/Box2dWeb-2.1.a.3.js');

  Sim = require('./simulation.js');

  Array.prototype.remove = function(item) {
    var indx;
    indx = this.indexOf(item);
    if (indx !== -1) {
      return this.splice(indx, 1);
    }
  };

  randint = function(max) {
    return parseInt(Math.random() * max);
  };

  IDcounter = 0;

  getID = function() {
    IDcounter += 1;
    return IDcounter;
  };

  game = Sim.game;

  Player = Sim.Player;

  console.log(Player);

  WebSocketServer = require("ws").Server;

  wss = new WebSocketServer({
    port: 8079
  });

  wss.on("connection", function(ws) {
    ws.on("message", function(message) {
      message = JSON.parse(message);
      if (typeof message === 'object') {
        if (message.login != null) {
          return game.new_connection(ws, message.login);
        } else if (ws.player != null) {
          if (message.chat != null) {
            console.log('chat', message.chat);
            game.broadcast({
              'chat': message.chat,
              'who': ws.player.ID
            });
          }
          if (message.keydown != null) {
            ws.player.keydown(message.keydown);
          }
          if (message.keyup != null) {
            return ws.player.keyup(message.keyup);
          }
        }
      }
    });
    ws.on("close", function(message) {
      game.players.remove(ws.player);
      game.world.DestroyBody(ws.player.body);
      ws.player.body = null;
      return game.broadcast({
        disconnect: ws.player.ID
      });
    });
    return ws.on('error', function(error) {
      return console.log('Client #%d error: %s', ws.player.ID, error.message);
    });
  });

  static_ = require("node-static");

  http = require("http");

  util = require("util");

  webroot = "../../";

  port = 8075;

  file = new static_.Server(webroot, {
    cache: 600,
    headers: {
      "X-Powered-By": "node-static"
    }
  });

  http.createServer(function(req, res) {
    return req.addListener("end", function() {
      return file.serve(req, res, function(err, result) {
        if (err) {
          console.error("Error serving %s - %s", req.url, err.message);
          if (err.status === 404 || err.status === 500) {
            return file.serveFile(util.format("/%d.html", err.status), err.status, {}, req, res);
          } else {
            res.writeHead(err.status, err.headers);
            return res.end();
          }
        } else {
          return console.log("%s - %s", req.url, res.message);
        }
      });
    });
  }).listen(port);

  console.log("node-static running at http://localhost:%d", port);

}).call(this);
